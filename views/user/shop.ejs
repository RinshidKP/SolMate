<%- include("./layout/header.ejs") %>
<style>
  .fixed-sidebar {
    position: sticky;
    top: 0;
    width: 23%;
    /* Adjust the width as per your layout */
  }

  .range_container {
    display: flex;
    flex-direction: column;
    width: 80%;
    margin: 0% auto;
  }

  .sliders_control {
    position: relative;
    min-height: 50px;
  }

  .form_control {
    padding: 0;
    margin: 0%;
    position: relative;
    display: flex;
    align-items: start;
    justify-content: space-between;
    font-size: 24px;
    color: #635a5a;
  }

  input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
    pointer-events: all;
    width: 24px;
    height: 24px;
    background-color: #fff;
    border-radius: 50%;
    box-shadow: 0 0 0 1px #C6C6C6;
    cursor: pointer;
  }

  input[type=range]::-moz-range-thumb {
    -webkit-appearance: none;
    pointer-events: all;
    width: 24px;
    height: 24px;
    background-color: #fff;
    border-radius: 50%;
    box-shadow: 0 0 0 1px #C6C6C6;
    cursor: pointer;
  }

  input[type=range]::-webkit-slider-thumb:hover {
    background: #f7f7f7;
  }

  input[type=range]::-webkit-slider-thumb:active {
    box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
    -webkit-box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
  }

  input[type="number"] {
    color: #8a8383;
    width: 50px;
    height: 30px;
    font-size: 20px;
    border: none;
  }

  input[type=number]::-webkit-inner-spin-button,
  input[type=number]::-webkit-outer-spin-button {
    opacity: 1;
  }

  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    height: 2px;
    width: 100%;
    position: absolute;
    background-color: #C6C6C6;
    pointer-events: none;
  }

  #fromSlider {
    height: 0;
    z-index: 1;
  }

  input[type="number"]::-webkit-inner-spin-button,
  input[type="number"]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  /* Optionally hide the input track for all number inputs */
  input[type="number"] {
    overflow: hidden;
  }
</style>
<!-- Shop Product Start -->
<div class="container">
  <div class="row">
    <!-- Sidebar Start -->
    <div class="col-md-3 mt-5 mb-5 ml-0">
      <div class="sticky-top">
        <!-- Mobile Filter Button -->
        <button class="btn btn-dark  d-md-none mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse" aria-expanded="false" aria-controls="filterCollapse">
          Filters  <i class="fas fa-chevron-down"></i>
        </button>
      <div class="collapse d-md-block" id="filterCollapse">
        <form class="mx-3 my-3" id="searchForm" method="GET">
          <div class="input-group">
            <input type="search" id="searchInput" name="search" class="form-control" placeholder="Search">
            <button type="submit" class="btn btn-dark">Search</button>
          </div>
        </form>
    
        <form method="get" class="mx-3 mt-3">
          <u><span class="fs-3 u" disabled>Categories</span></u>
          <div class="" id="categoryContainer">
            <%for(cat of categories){%>
            <div>
              <label class="fs-5 text-decoration-none text-dark">
                <input type="checkbox" checked name="selectedCat" value="<%= cat._id %>" />
                <%= cat.name %>
              </label>
            </div>
            <%}%>
          </div>
          <!-- <button type="button" onclick="getSelectedCategories()" class="btn btn-light">Apply Filters</button> -->
        </form>
        <div class="card-sm rounded " style="background-color: #447490; width:fit-content;">
          <div class="card-header d-flex justify-content-center fs-5">
            <p>Price</p>
          </div>
          <div class="card-body range_container mt-3">
            <div class="sliders_control">
              <input id="fromSlider" type="range" value="0" min="0" max="100" />
              <input id="toSlider" type="range" value="100" min="0" max="100" />
            </div>
            <div class="card-footer form_control mt-0">
              <div class="form_control_container ">
                <div class="form_control_container__time fs-6 d-none">Min</div>
                <input class="form_control_container__time__input" style="background-color: #447490;" type="number" id="fromInput" value="0" min="0" max="100" />
              </div>
              <div class="form_control_container">
                <div class="form_control_container__time fs-6 d-none">Max</div>
                <input class="form_control_container__time__input" style="background-color: #447490;" type="number" id="toInput" value="100" min="0" max="100" />
              </div>
            </div>
            <button class="btn btn-sm btn-secondary" onclick="resetPage()" id="clearFiltersButton">Clear Filters</button>
          </div>
        </div>
      </div>
      </div>
    </div>
    
    <!-- Sidebar End -->
    <div class="col-md-9 mb-5 mt-5">
      <form id="productForm">
        <div class="row" id="productContainer">
          <% products.forEach(item => { %>
          <div class="col-md-4 mb-4">
            <div class="card">
              <img src="<%= item.image[0].url %>" class="card-img-top" alt="">
              <div class="card-body">
                <h5 class="card-title"><%= item.name %></h5>
                <p class="card-text">&#x20B9;<%= item.price %></p>
                <a href="/product/shop?id=<%= item._id %>" class="fas fa-eye btn btn-dark mr-1">View</a>
                <%
                const sizesString = JSON.stringify(item.sizes);
                %>
                <a id="addnow" onclick="addToCart('<%= item._id %>','<%= sizesString %>')" class="fas fa-shopping-cart btn btn-secondary">Add</a>
              </div>
            </div>
          </div>
          <% }) %>
        </div>
      </form>
    </div>
    <div class="col-md-12 d-flex justify-content-center mt-4">
      <ul class="pagination">
        <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
          <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
        </li>
        <% for (let page = 1; page <= totalPages; page++) { %>
          <li class="page-item <%= page === currentPage ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= page %>"><%= page %></a>
          </li>
        <% } %>
        <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
          <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
        </li>
      </ul>
    </div>
    
  </div>
</div>
<!-- Shop Product End -->
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/fetch/3.0.0/fetch.min.js"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>

  const addToCart = async(productId,sizes) => {
    const addnow = document.getElementById('addnow'); 
    // addnow.addEventListener('click', (e) => { 
        // e.preventDefault();
        const sizesObject = JSON.parse(sizes);
        // console.log(sizesObject);

        // const filteredSizes = Object.keys(sizesObject).filter(key => sizesObject[key] > 0);

        const selectedSizes = Object.keys(sizesObject)
        .filter(key => sizesObject[key] > 0)
        .reduce((result, key) => {
          result[key] = key;
          return result;
        }, {});

        const inputOptions = new Promise((resolve) => {
          setTimeout(() => {
            resolve(selectedSizes)
          }, 1000)
        })

        const { value: selectedSize } = await Swal.fire({
          title: 'Select what you prefer.',
          input: 'radio',
          inputOptions: inputOptions,
          inputValidator: (value) => {
            if (!value) {
              return 'choose your fit!'
            }
          }
        })
        if(selectedSize){
          window.location.href = `/cart/add?quantity=1&productId=${productId}&selectedSize=${selectedSize}`

        }
}

  function resetPage() {
    window.location.href = 'http://localhost:3020/product';
  }

  function controlToInput(toSlider, fromInput, toInput, controlSlider) {
    const [from, to] = getParsed(fromInput, toInput);
    fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
    setToggleAccessible(toInput);
    if (from <= to) {
      toSlider.value = to;
      toInput.value = to;
    } else {
      toInput.value = from;
    }
  }

  function controlFromSlider(fromSlider, toSlider, fromInput) {
    const [from, to] = getParsed(fromSlider, toSlider);
    fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
    if (from > to) {
      fromSlider.value = to;
      fromInput.value = to;
    } else {
      fromInput.value = from;
    }
  }

  function controlToSlider(fromSlider, toSlider, toInput) {
    const [from, to] = getParsed(fromSlider, toSlider);
    fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
    setToggleAccessible(toSlider);
    if (from <= to) {
      toSlider.value = to;
      toInput.value = to;
    } else {
      toInput.value = from;
      toSlider.value = from;
    }
  }

  function getParsed(currentFrom, currentTo) {
    const from = parseInt(currentFrom.value, 10);
    const to = parseInt(currentTo.value, 10);
    return [from, to];
  }

  function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
    const rangeDistance = to.max - to.min;
    const fromPosition = from.value - to.min;
    const toPosition = to.value - to.min;
    controlSlider.style.background = `linear-gradient(
      to right,
      ${sliderColor} 0%,
      ${sliderColor} ${(fromPosition)/(rangeDistance)*100}%,
      ${rangeColor} ${((fromPosition)/(rangeDistance))*100}%,
      ${rangeColor} ${(toPosition)/(rangeDistance)*100}%, 
      ${sliderColor} ${(toPosition)/(rangeDistance)*100}%, 
      ${sliderColor} 100%)`;
  }

  function setToggleAccessible(currentTarget) {
    const toSlider = document.querySelector('#toSlider');
    if (Number(currentTarget.value) <= 0) {
      toSlider.style.zIndex = 2;
    } else {
      toSlider.style.zIndex = 0;
    }
  }

  const fromSlider = document.querySelector('#fromSlider');
  const toSlider = document.querySelector('#toSlider');
  const fromInput = document.querySelector('#fromInput');
  const toInput = document.querySelector('#toInput');
  fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
  setToggleAccessible(toSlider);

  fromSlider.oninput = () => controlFromSlider(fromSlider, toSlider, fromInput);
  toSlider.oninput = () => controlToSlider(fromSlider, toSlider, toInput);
  fromInput.oninput = () => controlFromInput(fromSlider, fromInput, toInput, toSlider);
  toInput.oninput = () => controlToInput(toSlider, fromInput, toInput, toSlider);
</script>




<%- include("./layout/footer.ejs") %>